selector_to_html = {"a[href=\"install.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Installation Guide<a class=\"headerlink\" href=\"#installation-guide\" title=\"Link to this heading\">#</a></h1><p>mbo_utilities has been developed to be a pure <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span></code> install.</p><p>This makes the choice of virtual-environment less relevant, you can use <code class=\"docutils literal notranslate\"><span class=\"pre\">venv</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">uv</span> <span class=\"pre\">(recommended)</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">conda</span></code>, it does not matter.</p>", "a[href=\"user_guide.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">mbo_utilities: User Guide<a class=\"headerlink\" href=\"#mbo-utilities-user-guide\" title=\"Link to this heading\">#</a></h1><p>Converting raw scanimage-tiff files into fused z-planes.</p><p>There are two computational efforts made during extraction:</p>", "a[href=\"venvs.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Virtual Environments<a class=\"headerlink\" href=\"#virtual-environments\" title=\"Link to this heading\">#</a></h1><p>This guide covers managing python environments with <a class=\"reference external\" href=\"https://docs.astral.sh/uv/\">UV</a> and <a class=\"reference external\" href=\"https://docs.conda.io/projects/conda/en/stable/user-guide/getting-started.html\">conda</a>.</p>", "a[href=\"api/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">API<a class=\"headerlink\" href=\"#api\" title=\"Link to this heading\">#</a></h1><p>Python API provides helper functions for saving, loading, processing and visualizing mbo datasets.</p>", "a[href=\"glossary.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Glossary<a class=\"headerlink\" href=\"#glossary\" title=\"Link to this heading\">#</a></h1>", "a[href=\"#gui\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">GUI<a class=\"headerlink\" href=\"#gui\" title=\"Link to this heading\">#</a></h2><p><a class=\"reference download internal\" download=\"\" href=\"_downloads/4d5b84c107f0ed5dcc2c65c746d388d0/mbo_gui_user_guide.pdf\"><span class=\"xref download myst\">Download GUI User Guide (PDF)</span></a></p>", "a[href=\"#useful\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Useful<a class=\"headerlink\" href=\"#useful\" title=\"Link to this heading\">#</a></h2><p><a class=\"reference external\" href=\"https://www.saaspegasus.com/guides/uv-deep-dive/#cheatsheet-common-operations-in-uvs-workflows\">uv-cheatsheet</a></p>", "a[href=\"#miller-brain-observatory-python-utilities\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Miller Brain Observatory: Python Utilities<a class=\"headerlink\" href=\"#miller-brain-observatory-python-utilities\" title=\"Link to this heading\">#</a></h1><p>This repository contains python functions to pre/post process datasets recording at the <a class=\"reference external\" href=\"https://mbo.rockefeller.edu\">Miller Brain Observatory</a></p>", "a[href=\"array_types.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Lazy Array Types<a class=\"headerlink\" href=\"#lazy-array-types\" title=\"Link to this heading\">#</a></h1><p>Understanding what <code class=\"docutils literal notranslate\"><span class=\"pre\">imread()</span></code> returns and when to use each array type.</p>", "a[href=\"image_gallery.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Image gallery<a class=\"headerlink\" href=\"#image-gallery\" title=\"Link to this heading\">#</a></h1><p>A place to render images so that they can be linked/referenced to with inline citations.</p>", "a[href=\"#overview\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Overview<a class=\"headerlink\" href=\"#overview\" title=\"Link to this heading\">#</a></h2>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
